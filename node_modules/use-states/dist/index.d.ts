/**
 * Provides a shorthand for binding a React state to an input element
 * @param getter The current value of the state
 * @param setter The setter function for the state
 * @param propName The name of the value prop to bind to (defaults to value)
 */
export declare function bindState(getter: any, setter: (a: any) => void, propName?: string): {
    [key: string]: any;
    onChange: (e: any) => void;
};
/**
 * Provides a shorthand for binding a React state to an input element
 * @param array An array containing the current value and the setter function for a state
 *              (basically the array that useState returns)
 * @param propName The name of the value prop to bind to (defaults to value)
 */
export declare function bindState(array: [any, (a: any) => void], propName?: string): {
    [key: string]: any;
    onChange: (e: any) => void;
};
/**
 * Provides a shorthand for binding a React state to an input element and
 * executing a side effect on state change
 * @param getter The current value of the state
 * @param setter The setter function for the state
 * @param callback The function to be executed when the state changes
 */
export declare function bindStateEffect(getter: any, setter: (a: any) => void, callback: (newValue: any) => void): {
    value: any;
    onChange: (e: any) => void;
};
/**
 * Provides a shorthand for binding a React state to an input element and
 * executing a side effect on state change
 * @param getter The current value of the state
 * @param setter The setter function for the state
 * @param fieldName The name of the value prop to bind to (defaults to value)
 * @param callback The function to be executed when the state changes
 */
export declare function bindStateEffect(getter: any, setter: (a: any) => void, fieldName: string, callback: (newValue: any) => void): {
    [key: string]: any;
    onChange: (e: any) => void;
};
/**
 * Provides a shorthand for binding a React state to an input element and
 * executing a side effect on state change
 * @param array An array containing the current value and the setter function for a state
 *              (basically the array that useState returns)
 * @param callback The function to be executed when the state changes
 */
export declare function bindStateEffect(array: [any, (a: any) => void], callback: (newValue: any) => void): {
    value: any;
    onChange: (e: any) => void;
};
/**
 * Provides a shorthand for binding a React state to an input element and
 * executing a side effect on state change
 * @param array An array containing the current value and the setter function for a state
 *              (basically the array that useState returns)
 * @param fieldName The name of the value prop to bind to (defaults to value)
 * @param callback The function to be executed when the state changes
 */
export declare function bindStateEffect(array: [any, (a: any) => void], fieldName: string, callback: (newValue: any) => void): {
    [key: string]: any;
    onChange: (e: any) => void;
};
/**
 * Makes every property in an object of initial values to be stateful
 * @param initialValues An object of initial values
 * @returns An object with the same properties but the properties are all stateful
 */
export declare function useStates(initialValues: Record<string, any>): Record<string, any> & Record<`$${string}`, any>;
